local userInput = game:GetService("UserInputService")


local localPlayer = game.Players.LocalPlayer
local character = localPlayer.Character
local humanoid = character:FindFirstChildWhichIsA("Humanoid")

-- Animations --
local idleAnimtionInstance = Instance.new("Animation")
idleAnimtionInstance.Name = "Idle Animation"
idleAnimtionInstance.Parent = humanoid
idleAnimtionInstance.AnimationId = "rbxassetid://13685702038" -- Idle Animation ID
local playIdleAnimtionInstance = humanoid:LoadAnimation(idleAnimtionInstance)

local walkingAnimtionInstance = Instance.new("Animation")
walkingAnimtionInstance.Name = "Walking Animation"
walkingAnimtionInstance.Parent = humanoid
walkingAnimtionInstance.AnimationId = "rbxassetid://13827444506" -- Walking Animation ID
local playWalkingAnimtionInstance = humanoid:LoadAnimation(walkingAnimtionInstance)

local runningAnimtionInstance = Instance.new("Animation")
runningAnimtionInstance.Name = "Running Animation"
runningAnimtionInstance.Parent = humanoid
runningAnimtionInstance.AnimationId = "rbxassetid://13834996569" -- Running Animation ID
local playRunningAnimtionInstance = humanoid:LoadAnimation(runningAnimtionInstance)

local jumpAnimtionInstance = Instance.new("Animation")
jumpAnimtionInstance.Name = "Jump Animation"
jumpAnimtionInstance.Parent = humanoid
jumpAnimtionInstance.AnimationId = "rbxassetid://13887795370" -- Default Jump Animation ID
local playJumpAnimtionInstance = humanoid:LoadAnimation(jumpAnimtionInstance)

local defaultFallAnimationInstance = Instance.new("Animation")
defaultFallAnimationInstance.Name = "Fall Animation"
defaultFallAnimationInstance.Parent = humanoid
defaultFallAnimationInstance.AnimationId = "rbxassetid://13887805857" -- Default Fall Animation ID
local playDefaultFallAnimationInstance = humanoid:LoadAnimation(defaultFallAnimationInstance)

local powerJumpAnimtionInstance = Instance.new("Animation")
powerJumpAnimtionInstance.Name = "Power Jump Animation"
powerJumpAnimtionInstance.Parent = humanoid
powerJumpAnimtionInstance.AnimationId = "rbxassetid://12444431408" --  Power Jump Animation ID
local playPowerJumpAnimtionInstance = humanoid:LoadAnimation(powerJumpAnimtionInstance)

local powerFallAnimationInstance = Instance.new("Animation")
powerFallAnimationInstance.Name = "Power Fall Animation"
powerFallAnimationInstance.Parent = humanoid
powerFallAnimationInstance.AnimationId = "rbxassetid://12444437622" -- Power Fall Animation ID
local playPowerFallAnimationInstance = humanoid:LoadAnimation(powerFallAnimationInstance)

local slidingAnimtionInstance = Instance.new("Animation")
slidingAnimtionInstance.Name = "Sliding Animation"
slidingAnimtionInstance.Parent = humanoid
slidingAnimtionInstance.AnimationId = "rbxassetid://12444476785" -- Sliding Animation ID
local playSlidingAnimtionInstance = humanoid:LoadAnimation(slidingAnimtionInstance)

-- Temp Stats For Landing --
--Soft landing (.4,1,1.6)
--Hard landing (.1,1,1.1)
local landingAnimtionInstance = Instance.new("Animation")
landingAnimtionInstance.Name = "Sliding Animation"
landingAnimtionInstance.Parent = humanoid
landingAnimtionInstance.AnimationId = "rbxassetid://13887820968" -- Landing Animation ID
local playLandingAnimtionInstance = humanoid:LoadAnimation(landingAnimtionInstance)

-- Script Variables

	-- Jump Variables
local currJumpAbl = "Default"
		--Editable Variables
local DEFUALT_JUMP_POWER = 50
local POWER_JUMP_POWER = 80

	-- Movement Variables
local currMovementAbl = "Idle"
		--Editable Variables
local WALK_SPEED = 13
local RUN_SPEED = 25

local currAnim = "nil"
-------------------

-- Script Logic --

local function Stop(animToStop)
	if animToStop == "nil" then
		
	else
		if animToStop == "Run" then
			playRunningAnimtionInstance:Stop(.35)
		elseif animToStop == "Walk" then
			playWalkingAnimtionInstance:Stop(.2)
		elseif animToStop == "Idle" then
			playIdleAnimtionInstance:Stop(.2)
		elseif animToStop == "DefaultJump" then
			playJumpAnimtionInstance:Stop(.2)
		elseif animToStop == "PowerJump" then
			playPowerJumpAnimtionInstance:Stop(.2)
		elseif animToStop == "DefaultFall" then
			playDefaultFallAnimationInstance:Stop(.2)
		elseif animToStop == "PowerFall" then
			playPowerFallAnimationInstance:Stop(.2)
		elseif animToStop == "Slide" then
			playSlidingAnimtionInstance:Stop(.2)
		elseif animToStop == "Land" then
			playSlidingAnimtionInstance:Stop(.2)
		elseif animToStop == "Swim" then
			
		elseif animToStop == "Crouch" then
			
		else
			warn("SAE:1")
		end
	end
end

local function jumpManager(currState,timeInAir)
	if currState == Enum.HumanoidStateType.Jumping then
		script:SetAttribute("Jumping", true)
		if currJumpAbl == "Default" then
			Stop(currAnim)
			playJumpAnimtionInstance:Play(.1,1,2)
			currAnim = "DefaultJump"
		elseif currJumpAbl == "Powered" then
			Stop(currAnim)
			playPowerJumpAnimtionInstance:Play(.1,1,2)
			currAnim = "PowerJump"
		end
	elseif currState == Enum.HumanoidStateType.Freefall then
		if currJumpAbl == "Default" then
			Stop(currAnim)
			playDefaultFallAnimationInstance:Play()
			currAnim = "DefaultFall"
		elseif currJumpAbl == "Powered" then
			Stop(currAnim)
			playPowerFallAnimationInstance:Play()
			currAnim = "PowerFall"
		end	
	elseif currState == Enum.HumanoidStateType.Landed then
		script:SetAttribute("Jumping", false)
		if timeInAir < .69 then
			Stop(currAnim)
			playLandingAnimtionInstance:Play(.1,.1,2)
			currAnim = "Land"
		elseif 1.5 >= timeInAir and timeInAir >= .69 then
			Stop(currAnim)
			playLandingAnimtionInstance:Play(.1,1,1.2)
			currAnim = "Land"
		elseif	timeInAir > 1.5 then
			Stop(currAnim)
			playLandingAnimtionInstance:Play(.1,1,.6)
			currAnim = "Land"
		end
	end
end

-- Tick Handler Variable --
local timeFromJump = tick()
local function jumpTimeHandler(isLanding,currState)
	if isLanding == nil then
		timeFromJump = tick()
	elseif isLanding == true then
		local timeInAir = tick() - timeFromJump
		jumpManager(currState,timeInAir)
	end
end

-- Toggles jump ability
userInput.InputBegan:Connect(function(input,busy) 
	if input.KeyCode == Enum.KeyCode.Q and not busy then
		
		if currJumpAbl == "Default" then
			humanoid.JumpPower = POWER_JUMP_POWER
			currJumpAbl = "Powered"
			
		elseif currJumpAbl == "Powered" then
			humanoid.JumpPower = DEFUALT_JUMP_POWER
			currJumpAbl = "Default"
		end
	end
end)




-- Jumping Manager
humanoid.StateChanged:Connect(function(prevState,currState)
	if currState == Enum.HumanoidStateType.Jumping then
		jumpManager(currState)
		jumpTimeHandler()
	elseif currState == Enum.HumanoidStateType.Freefall then
		jumpManager(currState)
	elseif currState == Enum.HumanoidStateType.Landed then
		jumpTimeHandler(true,currState)
	end
end)


local function movementManager(speed)
	print("Fired movement function")
	local currentSpeed = script:GetAttribute("Speed")
	print(currentSpeed)
	if humanoid:GetState() == Enum.HumanoidStateType.Running then
		if script:GetAttribute("Jumping") == true or script:GetAttribute("Sliding") == true then

		elseif script:GetAttribute("Jumping") == false or script:GetAttribute("Sliding") == false then
			if script:GetAttribute("Sprinting") == true then
				if (currentSpeed == 0) then
					if not (currAnim == "Idle") then
						Stop(currAnim)
						playIdleAnimtionInstance:Play(.1,1,1)
						currAnim = "Idle"
					else
						warn("MFE:4")
					end
				elseif (currentSpeed <= RUN_SPEED + 2) and (currentSpeed >= RUN_SPEED - 2) then
					if not (currAnim == "Run") then
						Stop(currAnim)
						playRunningAnimtionInstance:Play(.1,1,1)
						currAnim = "Run"
					end
				else
					
				end
			elseif script:GetAttribute("Sprinting") == false then
				if (currentSpeed == 0) then
					if not (currAnim == "Idle") then
						Stop(currAnim)
						playIdleAnimtionInstance:Play(.1,1,1)
						currAnim = "Idle"
					else
						warn("MFE:5")
					end
				elseif (currentSpeed <= WALK_SPEED + 2) and (currentSpeed >= WALK_SPEED - 2) then
					if not (currAnim == "Walk") then
						Stop(currAnim)
						playWalkingAnimtionInstance:Play(.1,1,1)
						currAnim = "Walk"
					end
				else
					
				end
			else 
				warn("MFE:3")
			end
		else
			warn("MFE:2")
		end
	elseif humanoid:GetState() == Enum.HumanoidStateType.Climbing then
		
	elseif humanoid:GetState() == Enum.HumanoidStateType.Swimming then

	elseif humanoid:GetState() == Enum.HumanoidStateType.Ragdoll then

	else 
		if humanoid:GetState() == Enum.HumanoidStateType.Jumping then

		elseif humanoid:GetState() == Enum.HumanoidStateType.Freefall then

		elseif humanoid:GetState() == Enum.HumanoidStateType.Landed then
			
		else 
			warn("MFE:1")
		end
	end
end



-- Toggles sprint
userInput.InputBegan:Connect(function(input,busy)
	if input.KeyCode == Enum.KeyCode.LeftShift and not busy then
		script:SetAttribute("Sprinting", true)
		humanoid.WalkSpeed = RUN_SPEED
		script:SetAttribute("Speed",RUN_SPEED)
	end
end)

userInput.InputEnded:Connect(function(input,busy)
	if input.KeyCode == Enum.KeyCode.LeftShift and not busy then
		script:SetAttribute("Sprinting", false)
		humanoid.WalkSpeed = WALK_SPEED
		script:SetAttribute("Speed",WALK_SPEED)
	end
end)


humanoid.Running:Connect(function(speed)
	print("Changed Speed")
	script:SetAttribute("Speed",speed)
	movementManager()
end)
