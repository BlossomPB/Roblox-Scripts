-- Input this script into StarterPlayer >> StarterCharacterScripts
local userInput = game:GetService("UserInputService")
local players = game:GetService("Players")
local tweenService = game:GetService("TweenService")
local ContextActionService = game:GetService("ContextActionService")

--[[
If using this script make sure to add all attributes with exact name shown here
as well as your desired value for each

For animations use your own this script doesn't provide default animations.
Insert animation ID after 
]]-- 
local SPRINT_SPEED = script:GetAttribute("SprintSpeed") -- Spriting Speed
local WALK_SPEED = script:GetAttribute("WalkSpeed")  -- Walking Speed
local POWER_JUMP_POWER = script:GetAttribute("JumpAbilityPower") -- Power Jump Power
local DEFUALT_JUMP_POWER = script:GetAttribute("DefualtJumpPower") -- Default Jump Power
local SLIDING_SPEED_INCREMENT = script:GetAttribute("SlidingSpeedIncrement") --  Lower Decimal = slower increment time

local playerModel = script.Parent
local humanoid = playerModel:FindFirstChildWhichIsA("Humanoid")
local Player = game.Players.LocalPlayer
local Character = Player.Character

--Camera Vars
local camera = workspace.CurrentCamera

-- Needed Varibles --
local runSpeedRound = SPRINT_SPEED - WALK_SPEED
local walkSpeedRound = WALK_SPEED - 2
local startTransition = .1
local stopTransition = .3
local slidingGoal = 0
local endSlide = nil
local shifting = nil
local cancelJump = nil
local FIELD_OF_VIEW_WALKING = 70
local FIELD_OF_VIEW_RUNNING = 74
local CAMERA_OFFSET_WALKING = Vector3.new(0,0,-.8)
local CAMERA_OFFSET_RUNNING = Vector3.new(0,0,-1)
local CAMERA_OFFSET_SLIDING = Vector3.new(0,-1.8,.4)

-- Animations --
--Falling is handled by "New Animations"
local idleAnimtionInstance = Instance.new("Animation")
idleAnimtionInstance.Name = "Idle Animation"
idleAnimtionInstance.Parent = humanoid
idleAnimtionInstance.AnimationId = "rbxassetid://" -- Idle Animation ID
local playIdleAnimtionInstance = Character.Humanoid:LoadAnimation(idleAnimtionInstance)

local walkingAnimtionInstance = Instance.new("Animation")
walkingAnimtionInstance.Name = "Walking Animation"
walkingAnimtionInstance.Parent = humanoid
walkingAnimtionInstance.AnimationId = "rbxassetid:/" -- Walking Animation ID
local playWalkingAnimtionInstance = Character.Humanoid:LoadAnimation(walkingAnimtionInstance)

local runningAnimtionInstance = Instance.new("Animation")
runningAnimtionInstance.Name = "Running Animation"
runningAnimtionInstance.Parent = humanoid
runningAnimtionInstance.AnimationId = "rbxassetid://" -- Running Animation ID
local playRunningAnimtionInstance = Character.Humanoid:LoadAnimation(runningAnimtionInstance)

local jumpAnimtionInstance = Instance.new("Animation")
jumpAnimtionInstance.Name = "Jump Animation"
jumpAnimtionInstance.Parent = humanoid
jumpAnimtionInstance.AnimationId = "rbxassetid://" -- Default Jump Animation ID
local playJumpAnimtionInstance = Character.Humanoid:LoadAnimation(jumpAnimtionInstance)

local defaultFallAnimationInstance = Instance.new("Animation")
defaultFallAnimationInstance.Name = "Fall Animation"
defaultFallAnimationInstance.Parent = humanoid
defaultFallAnimationInstance.AnimationId = "rbxassetid://" -- Default Fall Animation ID
local playDefaultFallAnimationInstance = Character.Humanoid:LoadAnimation(defaultFallAnimationInstance)

local powerJumpAnimtionInstance = Instance.new("Animation")
powerJumpAnimtionInstance.Name = "Power Jump Animation"
powerJumpAnimtionInstance.Parent = humanoid
powerJumpAnimtionInstance.AnimationId = "rbxassetid://" --  Power Jump Animation ID
local playPowerJumpAnimtionInstance = Character.Humanoid:LoadAnimation(powerJumpAnimtionInstance)

local powerFallAnimationInstance = Instance.new("Animation")
powerFallAnimationInstance.Name = "Power Fall Animation"
powerFallAnimationInstance.Parent = humanoid
powerFallAnimationInstance.AnimationId = "rbxassetid://" -- Power Fall Animation ID
local playPowerFallAnimationInstance = Character.Humanoid:LoadAnimation(powerFallAnimationInstance)

local slidingAnimtionInstance = Instance.new("Animation")
slidingAnimtionInstance.Name = "Sliding Animation"
slidingAnimtionInstance.Parent = humanoid
slidingAnimtionInstance.AnimationId = "rbxassetid://" -- Sliding Animation ID
local playSlidingAnimtionInstance = Character.Humanoid:LoadAnimation(slidingAnimtionInstance)


-- Uses/Sets Jump Power
humanoid.UseJumpPower = true
humanoid.JumpPower = script:GetAttribute("DefualtJumpPower")

local currentAnim = ""
local currentJumpAbility = ""
--[[
Anims:
-Run -Walk -Idle -Slide -PowerJump -DefaultJump -SuperFall -DefaultFall

JumpAbilities:
-Default -Powered
]]--

-- Handles Basic Movements --
	-- Fires Function When Avatar Moves 
local function movementManager(speed)
		if speed > runSpeedRound then
			if currentAnim == "Run" or currentAnim == "Slide" then
				return
			else
				playIdleAnimtionInstance:Stop(stopTransition)
				playWalkingAnimtionInstance:Stop(stopTransition)
				playPowerFallAnimationInstance:Stop(stopTransition)
				playDefaultFallAnimationInstance:Stop(stopTransition)

				playRunningAnimtionInstance:Play(startTransition)
				currentAnim = "Run"
				humanoid.CameraOffset = CAMERA_OFFSET_RUNNING
				for i = FIELD_OF_VIEW_WALKING,FIELD_OF_VIEW_RUNNING,.2 do
					camera.FieldOfView = i
					task.wait(.01)
				end
			end		
		elseif  runSpeedRound > speed and speed > walkSpeedRound then
			if currentAnim == "Walk" or currentAnim == "Slide" then
				return 
			else
				playIdleAnimtionInstance:Stop(stopTransition)
				playRunningAnimtionInstance:Stop(stopTransition)
				playPowerFallAnimationInstance:Stop(stopTransition)
				playDefaultFallAnimationInstance:Stop(stopTransition)

				playWalkingAnimtionInstance:Play(startTransition)
				currentAnim = "Walk"
				humanoid.CameraOffset = CAMERA_OFFSET_WALKING
				camera.FieldOfView = FIELD_OF_VIEW_WALKING
			end
		elseif .01 > speed then
			playRunningAnimtionInstance:Stop(stopTransition)
			playWalkingAnimtionInstance:Stop(stopTransition)
			playPowerFallAnimationInstance:Stop(stopTransition)
			playDefaultFallAnimationInstance:Stop(stopTransition)

			playIdleAnimtionInstance:Play(startTransition)
			currentAnim = "Idle"
		end
end

userInput.InputBegan:Connect(function(input,busy)
	if input.KeyCode == Enum.KeyCode.LeftShift and not busy then
		humanoid.WalkSpeed = SPRINT_SPEED
		shifting = true
	end
end)

userInput.InputEnded:Connect(function(input,busy)
	if input.KeyCode == Enum.KeyCode.LeftShift and not busy then
		humanoid.WalkSpeed = WALK_SPEED
		shifting = false
	end
end)

humanoid.Running:Connect(movementManager)
-- End --



-- Sliding --
	-- When not holding "E" it forces sliding to be cancled 
userInput.InputEnded:Connect(function(input,busy)
	if input.KeyCode == Enum.KeyCode.E and not busy	then
		endSlide = true
	end
end)

	-- Plays Sliding when E is pressed and held
userInput.InputBegan:Connect(function(input,busy)
	if input.KeyCode == Enum.KeyCode.E and not busy then
		if currentAnim == "Run" then
			currentAnim = "Slide"
			playRunningAnimtionInstance:Stop(stopTransition)
			playSlidingAnimtionInstance:Play(startTransition)
			humanoid.CameraOffset = CAMERA_OFFSET_SLIDING
			endSlide = false
			
				-- For loop that changes WalkSpeed when activated
			for i = SPRINT_SPEED,slidingGoal,-SLIDING_SPEED_INCREMENT do
				humanoid.WalkSpeed = i
				humanoid.CameraOffset = CAMERA_OFFSET_SLIDING
					-- Nested If Statments that handle when sliding is trying to be cancled
				if endSlide == true then
					endSlide = false
					if humanoid.Jumping == true then
						break
						else
						if shifting == false then
							playSlidingAnimtionInstance:Stop(stopTransition)
							playRunningAnimtionInstance:Stop(stopTransition)
							playWalkingAnimtionInstance:Play(startTransition)
							currentAnim = "Walk"
							humanoid.WalkSpeed = WALK_SPEED
							camera.FieldOfView = FIELD_OF_VIEW_WALKING
							humanoid.CameraOffset = CAMERA_OFFSET_WALKING
						elseif shifting == true then
							playSlidingAnimtionInstance:Stop(stopTransition)
							playWalkingAnimtionInstance:Stop(stopTransition)
							playRunningAnimtionInstance:Play(startTransition)
							currentAnim = "Run"
							humanoid.WalkSpeed = SPRINT_SPEED
							camera.FieldOfView = FIELD_OF_VIEW_RUNNING
							humanoid.CameraOffset = CAMERA_OFFSET_RUNNING
						end
					end
					break
				end
				
				task.wait(.1)
			end
		end
	end
end)
-- End --


-- Power Jump Ability Script --
userInput.InputBegan:Connect(function(input,busy) 
	if input.KeyCode == Enum.KeyCode.Q and not busy then
		if humanoid.JumpPower == DEFUALT_JUMP_POWER then
			humanoid.JumpPower = POWER_JUMP_POWER
			currentJumpAbility = "Powered"
		elseif humanoid.JumpPower == POWER_JUMP_POWER then
			humanoid.JumpPower = DEFUALT_JUMP_POWER
			currentJumpAbility = "Default"
		end
	end
end)
-- End --


-- Handles Jumping Animations --
userInput.JumpRequest:Connect(function(input)
		endSlide = true
		if humanoid.JumpPower == DEFUALT_JUMP_POWER then
			currentAnim = "DefaultJump"
			playDefaultFallAnimationInstance:Stop(stopTransition)
			playWalkingAnimtionInstance:Stop(stopTransition)
			playRunningAnimtionInstance:Stop(stopTransition)
			playSlidingAnimtionInstance:Stop(stopTransition)
			playIdleAnimtionInstance:Stop(stopTransition)
			
			playJumpAnimtionInstance:Play(startTransition)
		
			-- Plays Default Fall Animation (After jump)
			playJumpAnimtionInstance:Stop(stopTransition)
			
			playDefaultFallAnimationInstance:Play(startTransition)
			currentAnim = "DefaultFall"
			
		else -- Runs if Powerjump is enabled
			currentAnim = "PowerJump"
			playWalkingAnimtionInstance:Stop(stopTransition)
			playRunningAnimtionInstance:Stop(stopTransition)
			playSlidingAnimtionInstance:Stop(stopTransition)
			playIdleAnimtionInstance:Stop(stopTransition)
			
			playPowerJumpAnimtionInstance:Play(startTransition)
			
			-- Plays Power Fall Animation (After jump)
			playPowerJumpAnimtionInstance:Stop(stopTransition)
			
			playPowerFallAnimationInstance:Play(startTransition)
			currentAnim = "PowerFall"
		end
end)


	-- Plays when player touches ground again
humanoid:GetPropertyChangedSignal("FloorMaterial"):Connect(function()
	if humanoid.FloorMaterial == Enum.Material.Air then
		
	else
		playPowerFallAnimationInstance:Stop(stopTransition)
		playDefaultFallAnimationInstance:Stop(stopTransition)
	end
end)

while true do
	if humanoid.FloorMaterial == Enum.Material.Air then
		wait(.3)
		if humanoid.FloorMaterial == Enum.Material.Air then
			playDefaultFallAnimationInstance:Play(startTransition)
		end
	else
		playPowerFallAnimationInstance:Stop(stopTransition)
		playDefaultFallAnimationInstance:Stop(stopTransition)
	end
	wait(.4)
end
-- End PC/Consule--

-- Mobile Controls --
